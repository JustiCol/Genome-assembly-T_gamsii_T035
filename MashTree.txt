#!/bin/bash

###############################################################################
#####                            Slurm options                           ######
###############################################################################

#SBATCH --job-name=Mashtree_T_gamsii      # Job name
#SBATCH --cpus-per-task=12               # Number of cores
#SBATCH --mem=50G                         # Memory needed
#SBATCH --output=reports/%j-%x.out        # Output log

###############################################################################
# Ensure conda is initialized and activate the environment
eval "$(conda shell.bash hook)"
source $(conda info --base)/etc/profile.d/conda.sh

set -euo pipefail

# ------------------ USER SETTINGS ------------------
# Paths (relative to repo root)
REF_DIR="data/raw_data/Genome_trichoderma"
MY_ASM="data/raw_data/Contigs_T_gamsii.fasta"
OUTDIR="data/processed_data/Tricho_tree"

THREADS=12
BUSCO_LINEAGE="fungi_odb10"
MASHTREE="mashtree_env/bin/mashtree.pl"  # Path to Mashtree executable in env

# ---------------------------------------------------

mkdir -p "$OUTDIR"
cd "$OUTDIR"
mkdir -p quast_results busco_out reports

# 1) Gather all assemblies
ASSEMBLIES=("$MY_ASM" "$REF_DIR"/*.fna)

echo "[INFO] Found assemblies:"
printf '%s\n' "${ASSEMBLIES[@]}"

# 2) Run Mashtree
echo "[INFO] Running Mashtree..."
conda activate mashtree_env
$MASHTREE --numcpus "$THREADS" --genomesize 40000000 --sketch-size 20000 "${ASSEMBLIES[@]}" > assembly_tree.nwk
echo "[INFO] Mashtree completed: assembly_tree.nwk"
conda deactivate

# 3) Run QUAST
conda activate genome_assembly_env
echo "[INFO] Running QUAST..."
quast.py -o quast_results -t "$THREADS" --fast "${ASSEMBLIES[@]}"

# 4) Run BUSCO
echo "[INFO] Running BUSCO..."
for asm in "${ASSEMBLIES[@]}"; do
    name=$(basename "$asm" .fasta)
    if [ -d "busco_out/$name" ]; then
        echo "busco_out/$name exists, skipping"
        continue
    fi
    busco -i "$asm" -l "$BUSCO_LINEAGE" -m genome -c 4 -o "$name" -f --out_path busco_out || echo "BUSCO failed for $asm"
done

# 5) Create metadata table for iTOL
echo "Genome,Assembly_Type,Contigs,N50,Largest,BUSCO_C,BUSCO_D,BUSCO_F,BUSCO_M" > metadata.csv

for asm in "${ASSEMBLIES[@]}"; do
    name=$(basename "$asm" .fasta)
    TYPE=$([ "$asm" == "$MY_ASM" ] && echo "Contig" || echo "Reference")

    # QUAST stats
    if [ -f "quast_results/report.tsv" ]; then
        q_line=$(grep -P "^$name\t" quast_results/report.tsv || true)
        if [ -n "$q_line" ]; then
            contigs=$(echo "$q_line" | cut -f2)
            n50=$(echo "$q_line" | cut -f7)
            largest=$(echo "$q_line" | cut -f9)
        else
            contigs="NA"; n50="NA"; largest="NA"
        fi
    else
        contigs="NA"; n50="NA"; largest="NA"
    fi

    # BUSCO stats
    busco_file="busco_out/$name/run_$name/short_summary.txt"
    if [ -f "$busco_file" ]; then
        C=$(grep "^C:" "$busco_file" | head -1 | sed -n 's/^C:\([0-9.]*\)%.*$/\1/p')
        D=$(grep "^C:" "$busco_file" | head -1 | sed -n 's/.*\[S:[0-9.]*%,D:\([0-9.]*\)%\].*$/\1/p')
        F=$(grep "^C:" "$busco_file" | head -1 | sed -n 's/.*F:\([0-9.]*\)%,.*$/\1/p')
        M=$(grep "^C:" "$busco_file" | head -1 | sed -n 's/.*M:\([0-9.]*\)%.*$/\1/p')
    else
        C="NA"; D="NA"; F="NA"; M="NA"
    fi

    echo "$name,$TYPE,$contigs,$n50,$largest,$C,$D,$F,$M" >> metadata.csv
done

echo "[DONE] Outputs:"
echo "Tree: assembly_tree.nwk"
echo "Metadata table for iTOL: metadata.csv"
echo "QUAST results: quast_results/"
echo "BUSCO results: busco_out/"
