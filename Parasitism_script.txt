#############################################
# ðŸ“¦ Installation & libraries
#############################################
# install.packages("devtools") # uncomment if needed
devtools::install_github("xl0418/ggradar2")

library(dplyr)
library(tidyr)
library(ggplot2)

#############################################
# ðŸ“Š Data
#############################################
data <- read.table(text = "
...
", header = TRUE)

#############################################
# ðŸ›  Preparing data for radar plot
#############################################
plot_data <- data %>%
  group_by(anta, patho) %>%
  summarise(
    mean = mean(mean_para),
    sd   = mean(sd_para),
    .groups = "drop"
  ) %>%
  mutate(
    sd_minus = mean - sd,
    sd_plus  = mean + sd
  ) %>%
  arrange(anta, patho)

# Variables & angles
n <- n_distinct(plot_data$patho)
angles <- seq(0, 2*pi, length.out = n+1)[- (n+1)]

# Cartesian coordinates
plot_data <- plot_data %>%
  mutate(
    angle   = rep(angles, times = 2),
    x_mean  = mean    * sin(angle),
    y_mean  = mean    * cos(angle),
    x_sdmin = sd_minus * sin(angle),
    y_sdmin = sd_minus * cos(angle),
    x_sdplus= sd_plus  * sin(angle),
    y_sdplus= sd_plus  * cos(angle)
  )

# Close polygons
plot_data_closed <- plot_data %>%
  group_by(anta) %>%
  reframe(
    patho   = c(patho, patho[1]),
    x_mean  = c(x_mean,  x_mean[1]),
    y_mean  = c(y_mean,  y_mean[1]),
    x_sdmin = c(x_sdmin, x_sdmin[1]),
    y_sdmin = c(y_sdmin, y_sdmin[1]),
    x_sdplus= c(x_sdplus,x_sdplus[1]),
    y_sdplus= c(y_sdplus,y_sdplus[1])
  )

# Â±SD bands
band_data <- plot_data_closed %>%
  group_by(anta) %>%
  reframe(
    x = c(x_sdmin, rev(x_sdplus)),
    y = c(y_sdmin, rev(y_sdplus)),
    anta = rep(anta, times = 2)
  )

# Concentric polygons (scale)
radius_max <- max(plot_data_closed$x_sdplus, plot_data_closed$y_sdplus) * 1.1
scales <- seq(0.25, 1, by = 0.25)  
scale_polygons <- lapply(scales, function(r) {
  angles_scale <- seq(0, 2*pi, length.out = 13)[-13]
  data.frame(
    x = r * radius_max * sin(angles_scale),
    y = r * radius_max * cos(angles_scale),
    scale = paste0(r*100, "%")
  )
}) %>% bind_rows()

# Label positions
label_positions <- data.frame(
  patho = unique(plot_data$patho),
  angle = angles,
  x = radius_max * sin(angles),
  y = radius_max * cos(angles)
)

#############################################
# ðŸ“ˆ Radar plot
#############################################
ggplot() +
  # scale
  geom_polygon(data = scale_polygons, aes(x = x, y = y, group = scale),
               fill = NA, color = "grey80", linewidth = 0.5) +
  # Â±SD bands
  geom_polygon(data = band_data, aes(x = x, y = y, group = anta, fill = anta),
               alpha = 0.2, color = NA) +
  # mean
  geom_polygon(data = plot_data_closed, aes(x = x_mean, y = y_mean, group = anta, color = anta),
               fill = NA, linewidth = 1) +
  geom_point(data = plot_data_closed, aes(x = x_mean, y = y_mean, color = anta), size = 2) +
  # patho labels
  geom_text(data = label_positions, aes(x = x, y = y, label = patho), size = 4) +
  coord_fixed() +
  theme_minimal() +
  theme(
    axis.title = element_blank(),
    axis.text  = element_blank(),
    axis.ticks = element_blank(),
    legend.position = "bottom"
  ) +
  labs(color = "Condition", fill = "Condition")

#############################################
# ðŸ“Š Statistical analysis (parasitism)
#############################################
str(df)
table(df$anta)

# Means
aggregate(para ~ patho + anta, data = df, mean)

# Summary by group
resume <- df %>%
  group_by(patho, anta) %>%
  summarise(
    mean_para = mean(para, na.rm = TRUE),
    sd_para   = sd(para, na.rm = TRUE),
    n         = n(),
    .groups   = "drop"
  )
print(resume)

# Wilcoxon test per patient
resultats <- df %>%
  group_by(patho) %>%
  summarise(
    p_value = tryCatch(
      wilcox.test(para ~ anta)$p.value,
      error = function(e) NA
    ),
    .groups = "drop"
  )

# FDR correction
resultats$p_adj <- p.adjust(resultats$p_value, method = "fdr")
print(resultats)
